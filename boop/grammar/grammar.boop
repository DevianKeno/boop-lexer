grammar grammar;

// fragment LOWER: [a-z]+;
// fragment UPPER: [A-Z]+;
// fragment DIGIT: [0-9]+ ;
// fragment SPECIAL
//     : ' ' | '.'
//     ;
    
// fragment MATH: 'âˆš'
//     ;

// fragment ALPHA : LOWER | UPPER ;
// fragment ALNUM : ALPHA | DIGIT ;
// fragment SYMBOL : SPECIAL | MATH ;
// fragment CHARACTER : ALNUM | SYMBOL ;

// Keywords
// ABSTRACT   : 'abstract';
// ALIAS      : 'alias';
// ASYNC      : 'async';
// BASE       : 'base';
// BOOL       : 'bool';
// BREAK      : 'break';
// CASE       : 'case';
// CATCH      : 'catch';
// CHAR       : 'char';
// CLASS      : 'class';
// CONST      : 'const';
// CONSTANT   : 'constant';
// CONTINUE   : 'continue';
// DEFAULT    : 'default';
// DICT       : 'dict';
// DICTIONARY : 'dictionary';
// DO         : 'do';
// DOUBLE     : 'double';
// ELSE       : 'else';
// ENUM       : 'enum';
// ENUMERATION: 'enumeration';
// EVENT      : 'event';
// FALSE      : 'false';
// FLOAT      : 'float';
// FOR        : 'for';
// FOREACH    : 'foreach';
// FORMAT     : 'format';
// FOR_TIME   : 'fortime';
// FROM       : 'from';
// FUNC       : 'func';
// GET        : 'get';
// IF         : 'if';
// IMPORT     : 'import';
// INHERIT    : 'inherit';
// INT        : 'int';
// INTERFACE  : 'interface';
// LIST       : 'list';
// MILLISEC   : 'millisec';
// MODULE     : 'module';
// NULL       : 'null';
// OVERRIDE   : 'override';
// PRIVATE    : 'private';
// PROTECTED  : 'protected';
// PUBLIC     : 'public';
// RECUR      : 'recur';
// REF        : 'ref';
// RETURN     : 'return';
// SECOND     : 'second';
// SET        : 'set';
// STATIC     : 'static';
// STRING     : 'string';
// STRUCT     : 'struct';
// SWITCH     : 'switch';
// THIS       : 'this';
// THROW      : 'throw';
// TIME       : 'time';
// TRUE       : 'true';
// TRY        : 'try';
// VIRTUAL    : 'virtual';
// VOID       : 'void';
// WHILE      : 'while';
// WHERE      : 'where';

// ANGLD_L: '<';
// ANGLD_R: '>';
// BRCKT_L: '[';
// BRCKT_R: ']';
// COLON: ':';
// COMMA: ',';
// CURLY_L: '{';
// CURLY_R: '}';
// EQUALS: '=';
// PAREN_L: '(';
// PAREN_R: ')';
// RET_TYPE: '->';
// SEMICOLON: ';';

// END_STMNT: SEMICOLON;
// UNDERSCORE : '_' ;
// OP_EQUALITY: EQUALS;
// // INHERITS: COLON | INHERIT;

#region Rules

#region Program statement


boopProgram
    : moduleStatements? heading* mainDriver?
    ;

heading:moduleHeading|classHeading;

mainDriver
    : FUNC 'main' LEFT_PAREN mainDriverArgs? RIGHT_PAREN functionBody
    ;

mainDriverArgs
    : arrayStringDeclr identifier
    ;

#endregion

#region Headings

moduleHeading
    : modifiers? MODULE identifier moduleBody
    ;
    
classHeading
    : modifiers? CLASS typeParameters? identifier (INHERITS identifier)? interfaceSignature? classBody
    ;

#endregion

Identifier_Start_Character
    : UNDERSCORE
    | UPPER | LOWER
    ;

Identifier_Character
    : UNDERSCORE | UPPER | LOWER | DIGIT
    ;

identifier
    : Identifier_Start_Character Identifier_Character*
    ;

modifiers
    : access_modifier
    | access_modifier access_modifier
    ;

accessModifier
    : PUBLIC | PRIVATE | PROTECTED
    ;

dataPrimitive
    : INT | CHAR | FLOAT | DOUBLE | STRING
    ;

dataRef
    : identifier
    | LIST
    | DICT
    ;

dataType
    : data_primitive
    | data_ref
    ;

value
    : 's'
    ;

constant
    : value
    ;

varDeclaration
    : modifiers? dataType identifier END_STMNT
    | modifiers? dataType identifier OP_EQUALITY expression END_STMNT
    ;

statement
    : expression+
    ;

expression
    : constant
    | identifier
    | functionCall
    ;

block
    :
    ;

parameter
    : dataType identifier (EQUALS constant)?
    ;

functionParameters
    : PAREN_L (parameter (COMMA parameter)*)? PAREN_R
    ;

functionBody
    : CURLY_L block CURLY_R
    ;

typeParameters
    : ANGLD_L (dataType (COMMA dataType)*)? ANGLD_R
    ;

async
    : ASYNC
    ;

functionReturn
    : RET_TYPE dataType
    ;

functionHeading
    : modifiers? async? FUNC identifier typeParameters? functionParameters functionReturn? functionBody
    ;

recurLastParameter
    : TIME identifier
    | INT identifier
    ;

recurParameters
    : PAREN_L parameter+ (COMMA parameter)+ recurLastParameter PAREN_R
    | PAREN_L parameter (COMMA parameter)+ COMMA recurLastParameter PAREN_R
    ;

recurHeading
    : modifiers? async?
    RECUR identifier typeParameters? recurParameters functionReturn? functionBody
    ;

arguments
    : expression+
    ;

functionCall
    : identifier PAREN_L arguments? PAREN_R
    ;

structBody
    : CURLY_L CURLY_R
    ;

structHeading
    : modifiers?
    STRUCT identifier structBody
    ;

enumBody
    : CURLY_L (identifier (COMMA identifier)*)? CURLY_R
    ;

enumHeading
    : modifiers?
    ENUM identifier enumBody
    ;

eventBody
    : CURLY_L dataType* CURLY_R
    ;
 
eventHeading
    : modifiers?
    EVENT identifier eventBody
    ;

classBodyDeclarations
    : varDeclaration
    | functionHeading
    | classHeading
    | structHeading
    | enumHeading
    | eventHeading
    ;

classBody
    : CURLY_L classBodyDeclarations* CURLY_R
    ;


interfaceSignature
    : PAREN_L identifier (COMMA identifier)* PAREN_R
    ;

moduleBody
    : CURLY_L classHeading* CURLY_R
    ;

moduleHeading
    : MODULE identifier moduleBody
    ;

keyword
    : ABSTRACT    | ALIAS       | ALIAS      | BASE       | BOOL        | BREAK
    | CASE        | CATCH       | CHAR       | CLASS       | CONST
    | CONSTANT    | CONTINUE    | DEFAULT    | DICT        | DICTIONARY
    | DO          | DOUBLE      | ELSE       | ENUM        | ENUMERATION
    | EVENT       | FALSE       | FLOAT      | FOR         | FOREACH
    | FORMAT      | FOR_TIME    | FROM       | FUNC        | GET
    | IF          | IMPORT      | INHERIT    | INT         | INTERFACE
    | LIST        | MILLISEC    | MODULE     | NULL        | OVERRIDE
    | PRIVATE     | PROTECTED   | PUBLIC     | RECUR       | REF
    | RETURN      | SECOND      | SET        | STATIC      | STRING
    | STRUCT      | SWITCH      | THIS       | THROW       | TIME
    | TRUE        | TRY         | VIRTUAL    | VOID        | WHILE
    | WHERE
    ;

operator
    :
    ;

token
    : identifier
    | keyword
    | operator
    ;

#endregion