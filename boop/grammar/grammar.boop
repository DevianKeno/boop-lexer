
value
    : NUM_LITERAL NUM_SUFFIX?
    | NUM_LITERAL OP_DOT NUM_LITERAL NUM_SUFFIX? 
    | STRING_LITERAL
    ;

identifierList
    : IDENTIFIER COMMA IDENTIFIER
    | identifierList COMMA IDENTIFIER
    ;

arrayDeclaration
    : LEFT_BRACKET RIGHT_BRACKET
    ;

dataType
    : INT | BOOL | FLOAT | DOUBLE | STRING | VAR
    | dataType arrayDeclaration
    | IDENTIFIER arrayDeclaration
    ;

modifier
    : PUBLIC | PRIVATE | PROTECTED
    ;

arithmeticOperator
    : OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_TRUEDIV | OP_MOD | OP_EXPO
    ;

relationalOperator
    : REL_EQUALITY
    | LEFT_ANGLED_BRACKET
    | RIGHT_ANGLED_BRACKET
    | REL_LESS_OR_EQUAL
    | REL_GREATER_OR_EQUAL
    | REL_NOT_EQUALS
    ;

logicalOperator
    : LOGC_AND
    | LOGC_OR
    ;

term
    : IDENTIFIER arithmeticOperator IDENTIFIER
    | term arithmeticOperator value
    | value arithmeticOperator term
    ;

expression
    : term
    | LEFT_PAREN term RIGHT_PAREN
    ;

varDeclaration
    : dataType IDENTIFIER
    | dataType identifierList
    | varDeclaration COMMA IDENTIFIER
    | varDeclaration OP_ASSIGN value
    ;

varDeclarationStatement
    : modifier? STATIC? varDeclaration END_STATEMENT
    ;

conditionalExpression
    : value relationalOperator value
    | IDENTIFIER relationalOperator IDENTIFIER
    | value relationalOperator IDENTIFIER
    | value relationalOperator value
    ;

ifStatement
    : IF LEFT_PAREN conditionalExpression RIGHT_PAREN LEFT_BRACE body RIGHT_BRACE
    | IF LEFT_PAREN conditionalExpression RIGHT_PAREN LEFT_BRACE RIGHT_BRACE
    | ifStatement elseStatement
    ;

elseStatement
    : ELSE LEFT_BRACE RIGHT_BRACE
    | ELSE LEFT_BRACE body RIGHT_BRACE
    ;

// forStatement
//     : FOR LEFT_PAREN statement SEMICOLON condition SEMICOLON statement RIGHT_PAREN LEFT_BRACE body? RIGHT_BRACE
//     ;

returnStatement
    : RETURN END_STATEMENT
    | RETURN value END_STATEMENT
    | RETURN IDENTIFIER END_STATEMENT
    | RETURN expression END_STATEMENT
    ;

statement
    : ifStatement
    | returnStatement
    ;

body
    : varDeclarationStatement
    | functionDeclaration
    | classDeclaration
    | statement
    | body body
    ;

condition
    : value relationalOperator value
    | IDENTIFIER relationalOperator IDENTIFIER
    ;

functionReturn
    : DELIM_FUNC_RETURN dataType
    ;

functionModifier
    : REPEAT | DELAYED
    ;

functionParameter
    : varDeclaration COMMA varDeclaration
    | functionParameter COMMA varDeclaration
    ;

functionDeclaration
    : modifier? STATIC? ASYNC? functionModifier? FUNC IDENTIFIER
    LEFT_PAREN varDeclaration? RIGHT_PAREN functionReturn?
    LEFT_BRACE body? RIGHT_BRACE
    | modifier? STATIC? ASYNC? functionModifier? FUNC IDENTIFIER
    LEFT_PAREN functionParameter? RIGHT_PAREN functionReturn?
    LEFT_BRACE body? RIGHT_BRACE
    ;

interfaceHeading
    : modifier? INTERFACE IDENTIFIER
    ;

interfaceDeclaration
    : interfaceHeading LEFT_BRACE body? RIGHT_BRACE
    ;

classInherit
    : COLON IDENTIFIER
    ;

classInterface
    : LEFT_PAREN IDENTIFIER RIGHT_PAREN
    | LEFT_PAREN identifierList RIGHT_PAREN
    ;

classDeclaration
    : modifier? STATIC? CLASS IDENTIFIER
    classInherit? classInterface? 
    LEFT_BRACE body? RIGHT_BRACE
    ;

programStatement
    : classDeclaration
    | interfaceDeclaration
    | functionDeclaration
    | programStatement programStatement
    ;