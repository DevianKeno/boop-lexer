
value
    : NUM_LITERAL
    | STRING_LITERAL
    ;

dataPrimitive
    : VOID | INT | BOOL | FLOAT | DOUBLE
    ;
    
dataType
    : dataPrimitive
    ;

modifier
    : PUBLIC | PRIVATE | PROTECTED
    ;

arithmeticOperator
    : OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_TRUEDIV | OP_MOD | OP_EXPO
    ;

functionBody
    : STRING_LITERAL
    ;

functionReturn
    : DELIM_FUNC_RETURN dataType
    ;

functionModifier
    : REPEAT | DELAYED
    ;

functionHeading
    : modifier? FUNC IDENTIFIER LEFT_PAREN RIGHT_PAREN
    ;

functionDeclaration
    : functionHeading functionReturn LEFT_BRACE functionBody? RIGHT_BRACE
    ;

varDeclaration
    : modifier? dataType IDENTIFIER END_STATEMENT
    | modifier? dataType IDENTIFIER OP_ASSIGN value END_STATEMENT
    ;

declaration
    : varDeclaration
    ;

classBody
    : declaration
    ;

classHeading
    : modifier CLASS IDENTIFIER
    ;

classDeclaration
    : classHeading LEFT_BRACE classBody? RIGHT_BRACE
    ;

programStatement
    : classDeclaration
    ;

// functionHeading
//     : FUNC IDENTIFIER functionParameters functionBody
//     | FUNC IDENTIFIER functionParameters functionReturn functionBody
//     ;

// programStatement
//     : functionHeading
//     | moduleHeading
//     | classHeading
//     ;

// functionBody
//     : LEFT_BRACE RIGHT_BRACE
//     | LEFT_BRACE block RIGHT_BRACE
//     ;

// mainFunction
//     : FUNC IDENTIFIER LEFT_PAREN RIGHT_PAREN functionBody
//     ;

// value
//     : SINGLE_QUOTE DOLLAR SINGLE_QUOTE
//     ;
    
// STRING_LITERAL
//     : SINGLE_QUOTE DOLLAR SINGLE_QUOTE
//     ;
    
// dataType
//     : INT | BOOL | FLOAT | DOUBLE | STRING
//     ;

// parameter
//     : dataType IDENTIFIER
//     | dataType IDENTIFIER (EQUALS value)
//     ;
    
// expression
//     : value
//     | IDENTIFIER
//     | STRING_LITERAL
//     ;
    
// accessmodifier
//     : PUBLIC | PRIVATE | PROTECTED
//     ;

// secondarymodifier
//     : VIRTUAL | ABSTRACT | OVERRIDE
//     ;

// functionmodifier
//     : REPEAT | DELAYED | ASYNC
//     ;

// modifier
//     : accessmodifier
//     | accessmodifier secondarymodifier
//     ;

// functionReturn
//     : DELIM_FUNC_RETURN dataType
//     ;

// functionParameters
//     : LEFT_PAREN (parameter (COMMA parameter)*)? RIGHT_PAREN
//     ;

// moduleBody
//     : LEFT_BRACE classHeading* RIGHT_BRACE
//     ;

// moduleHeading
//     : MODULE IDENTIFIER moduleBody
//     ;

// variableDeclaration
//     : modifier? dataType IDENTIFIER SEMICOLON
//     | modifier? dataType IDENTIFIER OP_EQUALITY expression SEMICOLON
//     ;

// // parameter
// //     : dataType IDENTIFIER (EQUALS constant)?
// //     ;


// typeParameters
//     : LEFT_ANGLED_BRACKET (dataType (COMMA dataType)*)? RIGHT_ANGLED_BRACKET
//     ;

// recurLastParameter
//     : TIME IDENTIFIER
//     | INT IDENTIFIER
//     ;

// recurParameters
//     : LEFT_PAREN parameter+ (COMMA parameter)+ recurLastParameter RIGHT_PAREN
//     | LEFT_PAREN parameter (COMMA parameter)+ COMMA recurLastParameter RIGHT_PAREN
//     ;

// recurHeading
//     : modifier? ASYNC?
//     RECUR IDENTIFIER typeParameters? recurParameters functionReturn? functionBody
//     ;

// arguments
//     : expression+
//     ;

// functionCall
//     : IDENTIFIER LEFT_PAREN arguments? RIGHT_PAREN
//     ;

// structBody
//     : LEFT_BRACE RIGHT_BRACE
//     ;

// structHeading
//     : modifier?
//     STRUCT IDENTIFIER structBody
//     ;

// enumBody
//     : LEFT_BRACE (IDENTIFIER (COMMA IDENTIFIER)*)? RIGHT_BRACE
//     ;

// enumHeading
//     : modifier?
//     ENUM IDENTIFIER enumBody
//     ;

// eventBody
//     : LEFT_BRACE dataType* RIGHT_BRACE
//     ;
 
// eventHeading
//     : modifier?
//     EVENT IDENTIFIER eventBody
//     ;

// classBodyDeclarations
//     : variableDeclaration
//     | functionHeading
//     | classHeading
//     | structHeading
//     | enumHeading
//     | eventHeading
//     ;

// // classHeading
// //     : modifier? CLASS typeParameters? IDENTIFIER (INHERIT IDENTIFIER)? interfaceSignature? classBody
// //     ;

// interfaceSignature
//     : LEFT_BRACE IDENTIFIER (COMMA IDENTIFIER)* RIGHT_PAREN
//     ;

// keyword
//     : ABSTRACT    | ALIAS       | ALIAS      | BASE        | BOOL        | BREAK
//     | CASE        | CATCH       | CHAR       | CLASS       | CONST
//     | CONST       | CONTINUE    | DEFAULT    | DICT        
//     | DO          | DOUBLE      | ELSE       | ENUM        
//     | EVENT       | FALSE       | FLOAT      | FOR         | FOREACH
//     | FORMAT      | FORTIME     | FROM       | FUNC        | GET
//     | IF          | IMPORT      | INHERIT    | INT         | INTERFACE
//     | LIST        | MILLISEC    | MODULE     | NULL        | OVERRIDE
//     | PRIVATE     | PROTECTED   | PUBLIC     | RECUR       | REF
//     | RETURN      | SECOND      | SET        | STATIC      | STRING
//     | STRUCT      | SWITCH      | THIS       | THROW       | TIME
//     | TRUE        | TRY         | VIRTUAL    | VOID        | WHILE
//     | WHERE
//     ;

// #endregion